name: CI

on:
  pull_request:

jobs:
  ci:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        python-version: ["3.10"]
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}
    steps:
      - uses: actions/checkout@v2

      - name: set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: cache poetry
        uses: actions/cache@v2
        id: poetry-cache
        with:
          path: ~/.local
          key: ${{ runner.os }}-poetry

      - name: install poetry
        if: steps.poetry-cache.outputs.cache-hit != 'true'
        run: curl -sSL https://install.python-poetry.org/ | python3 -

      - name: add poetry to path
        run: echo "{HOME}/.local/bin" >> $GITHUB_PATH

      - name: dependencies cache
        uses: actions/cache@v2
        id: dependencies-cache
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetrydependencies-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetrydependencies-${{ matrix.python-version }}-

      - name: install dependencies
        run: poetry install --no-interaction

      - name: run black
        if: always()
        run: poetry run black --check --config=pyproject.toml .

      - name: run ruff
        if: always()
        run: poetry run ruff .

      - name: run mypy
        if: always()
        run: poetry run mypy --config-file=pyproject.toml .

      - name: run tests
        if: always()
        run: |
          set -o pipefail
          poetry run pytest -sv --cov=src --cov-report=term-missing --junitxml=pytest.xml | tee pytest-coverage.txt

      - name: pytest coverage comment
        uses: MishaKav/pytest-coverage-comment@v1.1.47
        with:
          pytest-coverage-path: ./pytest-coverage.txt
          junitxml-path: ./pytest.xml
